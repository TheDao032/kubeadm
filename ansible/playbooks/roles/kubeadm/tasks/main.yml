---
# tasks file for kubeadm
# Containerd reconfig config.toml
- name: Containerd reconfig config.toml & restart
  block:
    - name: Copy config.toml of containerd configuration file from template
      ansible.builtin.template:
        src: config.toml.j2
        dest: /etc/containerd/config.toml
        owner: vagrant
        group: vagrant
        mode: '0644'
    - name: Systemd restart containerd
      ansible.builtin.systemd_service:
        name: containerd
        state: restarted
        enabled: true

# Docker GPG key & Repository setup
- name: Docker GPG key & Repository setup # armored keys should use .asc extension, binary should use .gpg
  block:
    - name: Download Kubernetesâ€™s GPG key
      ansible.builtin.get_url:
        url: "https://pkgs.k8s.io/core:/stable:/{{ kubernetes_version }}/deb/Release.key"
        dest: /etc/apt/keyrings/kubernetes.asc

    - name: Add Kubernetes repository
      ansible.builtin.apt_repository:
        filename: kubernetes
        repo: "deb [signed-by=/etc/apt/keyrings/kubernetes.asc] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /"

# Install Docker Engine, CLI, Containerd, and plugins
- name: Install Docker Engine, CLI, Containerd, and plugins
  block:
    - name: Upddate apt packages
      ansible.builtin.apt:
        update_cache: yes
    - name: Install Kubernetes packages
      ansible.builtin.apt:
        name: "{{ item }}"
        state: present
      with_items: "{{ kubernetes_packages }}"
    - name: Hold Kubernetes packages
      ansible.builtin.dpkg_selections:
        name: "{{ item }}"
        selection: hold
      with_items: "{{ kubernetes_packages }}"

# Create kubernetes cluster
# - name: Controlplane cluster init and setup kube config
#   block:
#     - name: Create kubernetes cluster
#       ansible.builtin.shell:
#         cmd: "sudo kubeadm init --pod-network-cidr={{ pod_cidr }} --apiserver-advertise-address={{ ansible_host }} --v=5"
#     - name: Setup Kubernetes config
#       ansible.builtin.shell: |
#         mkdir -p $HOME/.kube
#         sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
#         sudo chown $(id -u):$(id -g) $HOME/.kube/config
#     - name: Fetch Kubernetes admin.conf to local machine
#       ansible.builtin.fetch:
#         src: /etc/kubernetes/admin.conf
#         dest: /tmp/admin.conf
#         flat: yes
#       delegate_to: localhost
#   when: ansible_hostname == 'controlplane'

# Create kubernetes cluster
# - name: Join worker node to master node
#   block:
#     - name: Generate kubeadm join command
#       ansible.builtin.shell:
#         cmd: sudo kubeadm token create --print-join-command --v=5
#       register: kubeadm_join_command
#     - name: Setting host facts using complex arguments
#       ansible.builtin.set_fact:
#         join_master_command: "{{ kubeadm_join_command.stdout }}"
#     - name: Execute kubeadm join command on worker nodes
#       ansible.builtin.shell:
#         cmd: "sudo {{ join_master_command }}"
#     - name: Ensure .kube directory exists
#       ansible.builtin.file:
#         path: /home/{{ ansible_user }}/.kube
#         state: directory
#         mode: '0755'
#     - name: Distribute kubeconfig profile to worker nodes
#       ansible.builtin.copy:
#         src: /tmp/admin.conf
#         dest: /home/{{ ansible_user }}/.kube/config
#         mode: '0644'
#   when: ansible_hostname != 'controlplane'
#
# - name: Systemd restart containerd
#   ansible.builtin.systemd_service:
#     name: kubelet
#     state: restarted
#     enabled: true
